// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "peek.proto" (package "peek", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { peekService } from "./peek";
import type { peekResponse } from "./peek";
import type { peekRequest } from "./peek";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { userResponse } from "./peek";
import type { userRequest } from "./peek";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service peek.peekService
 */
export interface IpeekServiceClient {
    /**
     * @generated from protobuf rpc: addUser(peek.userRequest) returns (peek.userResponse);
     */
    addUser(input: userRequest, options?: RpcOptions): UnaryCall<userRequest, userResponse>;
    /**
     * @generated from protobuf rpc: loginUser(peek.userRequest) returns (peek.userResponse);
     */
    loginUser(input: userRequest, options?: RpcOptions): UnaryCall<userRequest, userResponse>;
    /**
     * @generated from protobuf rpc: getCachedData(peek.peekRequest) returns (peek.peekResponse);
     */
    getCachedData(input: peekRequest, options?: RpcOptions): UnaryCall<peekRequest, peekResponse>;
    /**
     * @generated from protobuf rpc: getNewData(peek.peekRequest) returns (peek.peekResponse);
     */
    getNewData(input: peekRequest, options?: RpcOptions): UnaryCall<peekRequest, peekResponse>;
}
/**
 * @generated from protobuf service peek.peekService
 */
export class peekServiceClient implements IpeekServiceClient, ServiceInfo {
    typeName = peekService.typeName;
    methods = peekService.methods;
    options = peekService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: addUser(peek.userRequest) returns (peek.userResponse);
     */
    addUser(input: userRequest, options?: RpcOptions): UnaryCall<userRequest, userResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<userRequest, userResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: loginUser(peek.userRequest) returns (peek.userResponse);
     */
    loginUser(input: userRequest, options?: RpcOptions): UnaryCall<userRequest, userResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<userRequest, userResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: getCachedData(peek.peekRequest) returns (peek.peekResponse);
     */
    getCachedData(input: peekRequest, options?: RpcOptions): UnaryCall<peekRequest, peekResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<peekRequest, peekResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: getNewData(peek.peekRequest) returns (peek.peekResponse);
     */
    getNewData(input: peekRequest, options?: RpcOptions): UnaryCall<peekRequest, peekResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<peekRequest, peekResponse>("unary", this._transport, method, opt, input);
    }
}
