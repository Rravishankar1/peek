// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "peek.proto" (package "peek", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message peek.userRequest
 */
export interface userRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message peek.userResponse
 */
export interface userResponse {
    /**
     * @generated from protobuf field: int32 userID = 1;
     */
    userID: number;
}
/**
 * appId
 * 0 = Gmail
 * 1 = Instagram
 *
 * @generated from protobuf message peek.peekRequest
 */
export interface peekRequest {
    /**
     * @generated from protobuf field: int32 userID = 1;
     */
    userID: number;
    /**
     * @generated from protobuf field: peek.peekRequest.app appID = 2;
     */
    appID: peekRequest_app;
}
/**
 * @generated from protobuf enum peek.peekRequest.app
 */
export enum peekRequest_app {
    /**
     * @generated from protobuf enum value: GMAIL = 0;
     */
    GMAIL = 0,
    /**
     * @generated from protobuf enum value: INSTAGRAM = 1;
     */
    INSTAGRAM = 1,
    /**
     * @generated from protobuf enum value: DISCORD = 2;
     */
    DISCORD = 2,
    /**
     * @generated from protobuf enum value: WHATSAPP = 3;
     */
    WHATSAPP = 3,
    /**
     * @generated from protobuf enum value: MESSENGER = 4;
     */
    MESSENGER = 4,
    /**
     * @generated from protobuf enum value: TWITTER = 5;
     */
    TWITTER = 5
}
/**
 * @generated from protobuf message peek.peekResponse
 */
export interface peekResponse {
    /**
     * @generated from protobuf field: repeated peek.topic topics = 1;
     */
    topics: topic[];
}
/**
 * @generated from protobuf message peek.topic
 */
export interface topic {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 emoji = 2;
     */
    emoji: number;
    /**
     * @generated from protobuf field: string highlight = 3;
     */
    highlight: string;
    /**
     * @generated from protobuf field: string summary = 4;
     */
    summary: string;
    /**
     * @generated from protobuf field: repeated peek.notif notifs = 5;
     */
    notifs: notif[];
}
/**
 * @generated from protobuf message peek.notif
 */
export interface notif {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class userRequest$Type extends MessageType<userRequest> {
    constructor() {
        super("peek.userRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<userRequest>): userRequest {
        const message = { username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<userRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: userRequest): userRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: userRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.userRequest
 */
export const userRequest = new userRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class userResponse$Type extends MessageType<userResponse> {
    constructor() {
        super("peek.userResponse", [
            { no: 1, name: "userID", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<userResponse>): userResponse {
        const message = { userID: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<userResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: userResponse): userResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userID */ 1:
                    message.userID = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: userResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userID = 1; */
        if (message.userID !== 0)
            writer.tag(1, WireType.Varint).int32(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.userResponse
 */
export const userResponse = new userResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class peekRequest$Type extends MessageType<peekRequest> {
    constructor() {
        super("peek.peekRequest", [
            { no: 1, name: "userID", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appID", kind: "enum", T: () => ["peek.peekRequest.app", peekRequest_app] }
        ]);
    }
    create(value?: PartialMessage<peekRequest>): peekRequest {
        const message = { userID: 0, appID: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<peekRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: peekRequest): peekRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userID */ 1:
                    message.userID = reader.int32();
                    break;
                case /* peek.peekRequest.app appID */ 2:
                    message.appID = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: peekRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userID = 1; */
        if (message.userID !== 0)
            writer.tag(1, WireType.Varint).int32(message.userID);
        /* peek.peekRequest.app appID = 2; */
        if (message.appID !== 0)
            writer.tag(2, WireType.Varint).int32(message.appID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.peekRequest
 */
export const peekRequest = new peekRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class peekResponse$Type extends MessageType<peekResponse> {
    constructor() {
        super("peek.peekResponse", [
            { no: 1, name: "topics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => topic }
        ]);
    }
    create(value?: PartialMessage<peekResponse>): peekResponse {
        const message = { topics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<peekResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: peekResponse): peekResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated peek.topic topics */ 1:
                    message.topics.push(topic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: peekResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated peek.topic topics = 1; */
        for (let i = 0; i < message.topics.length; i++)
            topic.internalBinaryWrite(message.topics[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.peekResponse
 */
export const peekResponse = new peekResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class topic$Type extends MessageType<topic> {
    constructor() {
        super("peek.topic", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "emoji", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "highlight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "notifs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => notif }
        ]);
    }
    create(value?: PartialMessage<topic>): topic {
        const message = { name: "", emoji: 0, highlight: "", summary: "", notifs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<topic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: topic): topic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 emoji */ 2:
                    message.emoji = reader.int32();
                    break;
                case /* string highlight */ 3:
                    message.highlight = reader.string();
                    break;
                case /* string summary */ 4:
                    message.summary = reader.string();
                    break;
                case /* repeated peek.notif notifs */ 5:
                    message.notifs.push(notif.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: topic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 emoji = 2; */
        if (message.emoji !== 0)
            writer.tag(2, WireType.Varint).int32(message.emoji);
        /* string highlight = 3; */
        if (message.highlight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.highlight);
        /* string summary = 4; */
        if (message.summary !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.summary);
        /* repeated peek.notif notifs = 5; */
        for (let i = 0; i < message.notifs.length; i++)
            notif.internalBinaryWrite(message.notifs[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.topic
 */
export const topic = new topic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class notif$Type extends MessageType<notif> {
    constructor() {
        super("peek.notif", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<notif>): notif {
        const message = { title: "", uri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<notif>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: notif): notif {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: notif, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message peek.notif
 */
export const notif = new notif$Type();
/**
 * @generated ServiceType for protobuf service peek.peekService
 */
export const peekService = new ServiceType("peek.peekService", [
    { name: "addUser", options: {}, I: userRequest, O: userResponse },
    { name: "loginUser", options: {}, I: userRequest, O: userResponse },
    { name: "getCachedData", options: {}, I: peekRequest, O: peekResponse },
    { name: "getNewData", options: {}, I: peekRequest, O: peekResponse }
]);
